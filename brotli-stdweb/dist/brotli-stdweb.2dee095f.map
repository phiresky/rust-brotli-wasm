{"version":3,"sources":["brotli-stdweb.js",".cache/.cargo-web/loader-1fb0d8289281c872d3332663f961e786.js"],"names":["Object","assign","window","compress","decompress","input","Uint8Array","Array","fill","compressed","output","console","log","module","exports","bundle","fetch","then","response","arrayBuffer","WebAssembly","compile","bytes","__initialize","__wasm_module","__load_asynchronously","Module","STDWEB_PRIVATE","to_utf8","str","addr","i","length","u","charCodeAt","noop","to_js","address","kind","HEAPU8","HEAP32","HEAPF64","pointer","HEAPU32","to_js_string","push","value_array_pointer","key_array_pointer","key_pointer","key_length","key","value","acquire_js_reference","adapter_pointer","deallocator_pointer","ReferenceError","args","alloc","serialize_array","arguments","dyncall","result","tmp","drop","function_pointer","array_kind","pointer_end","subarray","HEAP8","HEAPU16","HEAP16","HEAPF32","get_raw_value","serialize_object","keys","utf8_len","key_address","from_js","prototype","toString","call","undefined","id","register_raw_value","refid","acquire_rust_reference","index","end","x","String","fromCharCode","init","y","ch","z","y_z","w","id_to_ref_map","id_to_refcount_map","ref_to_id_map","WeakMap","ref_to_id_map_fallback","Map","last_refid","id_to_raw_value_map","last_raw_value_id","reference","get","set","e","increment_refcount","decrement_refcount","delete","unregister_raw_value","size","web_malloc","signature","ptr","web_table","apply","len","prepare_any_arg","arg","acquire_tmp","dummy","defineProperty","__imports","$0","$1","array","error","$2","slice","Math","log2","buffer","instance","memory","Int8Array","Int16Array","Int32Array","Uint16Array","Uint32Array","Float32Array","Float64Array","__instantiate","__web_malloc","__web_free","__web_table","arr","buffer_size","quality","lg_window_size","env","__web_on_grow","instantiate","catch","Instance","mod"],"mappings":"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","file":"brotli-stdweb.2dee095f.map","sourceRoot":"..","sourcesContent":["import { compress, decompress } from \"./Cargo.toml\";\n\nObject.assign(window, { compress, decompress });\n\n\nconst input = new Uint8Array(Array(256).fill(1));\nconst compressed = compress(input, 4096, 11, 21);\nconst output = decompress(compressed, 4096);\nconsole.log({ input, compressed, output });\n","\n            module.exports = function( bundle ) {\n                function __initialize( __wasm_module, __load_asynchronously ) {\n    const Module = {};\n\n    Module.STDWEB_PRIVATE = {};\n\n// This is based on code from Emscripten's preamble.js.\nModule.STDWEB_PRIVATE.to_utf8 = function to_utf8( str, addr ) {\n    for( var i = 0; i < str.length; ++i ) {\n        // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.\n        // See http://unicode.org/faq/utf_bom.html#utf16-3\n        // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629\n        var u = str.charCodeAt( i ); // possibly a lead surrogate\n        if( u >= 0xD800 && u <= 0xDFFF ) {\n            u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt( ++i ) & 0x3FF);\n        }\n\n        if( u <= 0x7F ) {\n            HEAPU8[ addr++ ] = u;\n        } else if( u <= 0x7FF ) {\n            HEAPU8[ addr++ ] = 0xC0 | (u >> 6);\n            HEAPU8[ addr++ ] = 0x80 | (u & 63);\n        } else if( u <= 0xFFFF ) {\n            HEAPU8[ addr++ ] = 0xE0 | (u >> 12);\n            HEAPU8[ addr++ ] = 0x80 | ((u >> 6) & 63);\n            HEAPU8[ addr++ ] = 0x80 | (u & 63);\n        } else if( u <= 0x1FFFFF ) {\n            HEAPU8[ addr++ ] = 0xF0 | (u >> 18);\n            HEAPU8[ addr++ ] = 0x80 | ((u >> 12) & 63);\n            HEAPU8[ addr++ ] = 0x80 | ((u >> 6) & 63);\n            HEAPU8[ addr++ ] = 0x80 | (u & 63);\n        } else if( u <= 0x3FFFFFF ) {\n            HEAPU8[ addr++ ] = 0xF8 | (u >> 24);\n            HEAPU8[ addr++ ] = 0x80 | ((u >> 18) & 63);\n            HEAPU8[ addr++ ] = 0x80 | ((u >> 12) & 63);\n            HEAPU8[ addr++ ] = 0x80 | ((u >> 6) & 63);\n            HEAPU8[ addr++ ] = 0x80 | (u & 63);\n        } else {\n            HEAPU8[ addr++ ] = 0xFC | (u >> 30);\n            HEAPU8[ addr++ ] = 0x80 | ((u >> 24) & 63);\n            HEAPU8[ addr++ ] = 0x80 | ((u >> 18) & 63);\n            HEAPU8[ addr++ ] = 0x80 | ((u >> 12) & 63);\n            HEAPU8[ addr++ ] = 0x80 | ((u >> 6) & 63);\n            HEAPU8[ addr++ ] = 0x80 | (u & 63);\n        }\n    }\n};\n\nModule.STDWEB_PRIVATE.noop = function() {};\nModule.STDWEB_PRIVATE.to_js = function to_js( address ) {\n    var kind = HEAPU8[ address + 12 ];\n    if( kind === 0 ) {\n        return undefined;\n    } else if( kind === 1 ) {\n        return null;\n    } else if( kind === 2 ) {\n        return HEAP32[ address / 4 ];\n    } else if( kind === 3 ) {\n        return HEAPF64[ address / 8 ];\n    } else if( kind === 4 ) {\n        var pointer = HEAPU32[ address / 4 ];\n        var length = HEAPU32[ (address + 4) / 4 ];\n        return Module.STDWEB_PRIVATE.to_js_string( pointer, length );\n    } else if( kind === 5 ) {\n        return false;\n    } else if( kind === 6 ) {\n        return true;\n    } else if( kind === 7 ) {\n        var pointer = HEAPU32[ address / 4 ];\n        var length = HEAPU32[ (address + 4) / 4 ];\n        var output = [];\n        for( var i = 0; i < length; ++i ) {\n            output.push( Module.STDWEB_PRIVATE.to_js( pointer + i * 16 ) );\n        }\n        return output;\n    } else if( kind === 8 ) {\n        var value_array_pointer = HEAPU32[ address / 4 ];\n        var length = HEAPU32[ (address + 4) / 4 ];\n        var key_array_pointer = HEAPU32[ (address + 8) / 4 ];\n        var output = {};\n        for( var i = 0; i < length; ++i ) {\n            var key_pointer = HEAPU32[ (key_array_pointer + i * 8) / 4 ];\n            var key_length = HEAPU32[ (key_array_pointer + 4 + i * 8) / 4 ];\n            var key = Module.STDWEB_PRIVATE.to_js_string( key_pointer, key_length );\n            var value = Module.STDWEB_PRIVATE.to_js( value_array_pointer + i * 16 );\n            output[ key ] = value;\n        }\n        return output;\n    } else if( kind === 9 ) {\n        return Module.STDWEB_PRIVATE.acquire_js_reference( HEAP32[ address / 4 ] );\n    } else if( kind === 10 ) {\n        var adapter_pointer = HEAPU32[ address / 4 ];\n        var pointer = HEAPU32[ (address + 4) / 4 ];\n        var deallocator_pointer = HEAPU32[ (address + 8) / 4 ];\n        var output = function() {\n            if( pointer === 0 ) {\n                throw new ReferenceError( \"Already dropped Rust function called!\" );\n            }\n\n            var args = Module.STDWEB_PRIVATE.alloc( 16 );\n            Module.STDWEB_PRIVATE.serialize_array( args, arguments );\n            Module.STDWEB_PRIVATE.dyncall( \"vii\", adapter_pointer, [pointer, args] );\n            var result = Module.STDWEB_PRIVATE.tmp;\n            Module.STDWEB_PRIVATE.tmp = null;\n\n            return result;\n        };\n\n        output.drop = function() {\n            output.drop = Module.STDWEB_PRIVATE.noop;\n            var function_pointer = pointer;\n            pointer = 0;\n\n            Module.STDWEB_PRIVATE.dyncall( \"vi\", deallocator_pointer, [function_pointer] );\n        };\n\n        return output;\n    } else if( kind === 13 ) {\n        var adapter_pointer = HEAPU32[ address / 4 ];\n        var pointer = HEAPU32[ (address + 4) / 4 ];\n        var deallocator_pointer = HEAPU32[ (address + 8) / 4 ];\n        var output = function() {\n            if( pointer === 0 ) {\n                throw new ReferenceError( \"Already called or dropped FnOnce function called!\" );\n            }\n\n            output.drop = Module.STDWEB_PRIVATE.noop;\n            var function_pointer = pointer;\n            pointer = 0;\n\n            var args = Module.STDWEB_PRIVATE.alloc( 16 );\n            Module.STDWEB_PRIVATE.serialize_array( args, arguments );\n            Module.STDWEB_PRIVATE.dyncall( \"vii\", adapter_pointer, [function_pointer, args] );\n            var result = Module.STDWEB_PRIVATE.tmp;\n            Module.STDWEB_PRIVATE.tmp = null;\n\n            return result;\n        };\n\n        output.drop = function() {\n            output.drop = Module.STDWEB_PRIVATE.noop;\n            var function_pointer = pointer;\n            pointer = 0;\n\n            Module.STDWEB_PRIVATE.dyncall( \"vi\", deallocator_pointer, [function_pointer] );\n        };\n\n        return output;\n    } else if( kind === 14 ) {\n        var pointer = HEAPU32[ address / 4 ];\n        var length = HEAPU32[ (address + 4) / 4 ];\n        var array_kind = HEAPU32[ (address + 8) / 4 ];\n        var pointer_end = pointer + length;\n\n        switch( array_kind ) {\n            case 0:\n                return HEAPU8.subarray( pointer, pointer_end );\n            case 1:\n                return HEAP8.subarray( pointer, pointer_end );\n            case 2:\n                return HEAPU16.subarray( pointer, pointer_end );\n            case 3:\n                return HEAP16.subarray( pointer, pointer_end );\n            case 4:\n                return HEAPU32.subarray( pointer, pointer_end );\n            case 5:\n                return HEAP32.subarray( pointer, pointer_end );\n            case 6:\n                return HEAPF32.subarray( pointer, pointer_end );\n            case 7:\n                return HEAPF64.subarray( pointer, pointer_end );\n        }\n    } else if( kind === 15 ) {\n        return Module.STDWEB_PRIVATE.get_raw_value( HEAPU32[ address / 4 ] );\n    }\n};\n\nModule.STDWEB_PRIVATE.serialize_object = function serialize_object( address, value ) {\n    var keys = Object.keys( value );\n    var length = keys.length;\n    var key_array_pointer = Module.STDWEB_PRIVATE.alloc( length * 8 );\n    var value_array_pointer = Module.STDWEB_PRIVATE.alloc( length * 16 );\n    HEAPU8[ address + 12 ] = 8;\n    HEAPU32[ address / 4 ] = value_array_pointer;\n    HEAPU32[ (address + 4) / 4 ] = length;\n    HEAPU32[ (address + 8) / 4 ] = key_array_pointer;\n    for( var i = 0; i < length; ++i ) {\n        var key = keys[ i ];\n        var key_length = Module.STDWEB_PRIVATE.utf8_len( key );\n        var key_pointer = Module.STDWEB_PRIVATE.alloc( key_length );\n        Module.STDWEB_PRIVATE.to_utf8( key, key_pointer );\n\n        var key_address = key_array_pointer + i * 8;\n        HEAPU32[ key_address / 4 ] = key_pointer;\n        HEAPU32[ (key_address + 4) / 4 ] = key_length;\n\n        Module.STDWEB_PRIVATE.from_js( value_array_pointer + i * 16, value[ key ] );\n    }\n};\n\nModule.STDWEB_PRIVATE.serialize_array = function serialize_array( address, value ) {\n    var length = value.length;\n    var pointer = Module.STDWEB_PRIVATE.alloc( length * 16 );\n    HEAPU8[ address + 12 ] = 7;\n    HEAPU32[ address / 4 ] = pointer;\n    HEAPU32[ (address + 4) / 4 ] = length;\n    for( var i = 0; i < length; ++i ) {\n        Module.STDWEB_PRIVATE.from_js( pointer + i * 16, value[ i ] );\n    }\n};\n\nModule.STDWEB_PRIVATE.from_js = function from_js( address, value ) {\n    var kind = Object.prototype.toString.call( value );\n    if( kind === \"[object String]\" ) {\n        var length = Module.STDWEB_PRIVATE.utf8_len( value );\n        var pointer = 0;\n        if( length > 0 ) {\n            pointer = Module.STDWEB_PRIVATE.alloc( length );\n            Module.STDWEB_PRIVATE.to_utf8( value, pointer );\n        }\n        HEAPU8[ address + 12 ] = 4;\n        HEAPU32[ address / 4 ] = pointer;\n        HEAPU32[ (address + 4) / 4 ] = length;\n    } else if( kind === \"[object Number]\" ) {\n        if( value === (value|0) ) {\n            HEAPU8[ address + 12 ] = 2;\n            HEAP32[ address / 4 ] = value;\n        } else {\n            HEAPU8[ address + 12 ] = 3;\n            HEAPF64[ address / 8 ] = value;\n        }\n    } else if( value === null ) {\n        HEAPU8[ address + 12 ] = 1;\n    } else if( value === undefined ) {\n        HEAPU8[ address + 12 ] = 0;\n    } else if( value === false ) {\n        HEAPU8[ address + 12 ] = 5;\n    } else if( value === true ) {\n        HEAPU8[ address + 12 ] = 6;\n    } else if( kind === \"[object Symbol]\" ) {\n        var id = Module.STDWEB_PRIVATE.register_raw_value( value );\n        HEAPU8[ address + 12 ] = 15;\n        HEAP32[ address / 4 ] = id;\n    } else {\n        var refid = Module.STDWEB_PRIVATE.acquire_rust_reference( value );\n        HEAPU8[ address + 12 ] = 9;\n        HEAP32[ address / 4 ] = refid;\n    }\n};\n\n// This is ported from Rust's stdlib; it's faster than\n// the string conversion from Emscripten.\nModule.STDWEB_PRIVATE.to_js_string = function to_js_string( index, length ) {\n    index = index|0;\n    length = length|0;\n    var end = (index|0) + (length|0);\n    var output = \"\";\n    while( index < end ) {\n        var x = HEAPU8[ index++ ];\n        if( x < 128 ) {\n            output += String.fromCharCode( x );\n            continue;\n        }\n        var init = (x & (0x7F >> 2));\n        var y = 0;\n        if( index < end ) {\n            y = HEAPU8[ index++ ];\n        }\n        var ch = (init << 6) | (y & 63);\n        if( x >= 0xE0 ) {\n            var z = 0;\n            if( index < end ) {\n                z = HEAPU8[ index++ ];\n            }\n            var y_z = ((y & 63) << 6) | (z & 63);\n            ch = init << 12 | y_z;\n            if( x >= 0xF0 ) {\n                var w = 0;\n                if( index < end ) {\n                    w = HEAPU8[ index++ ];\n                }\n                ch = (init & 7) << 18 | ((y_z << 6) | (w & 63));\n\n                output += String.fromCharCode( 0xD7C0 + (ch >> 10) );\n                ch = 0xDC00 + (ch & 0x3FF);\n            }\n        }\n        output += String.fromCharCode( ch );\n        continue;\n    }\n    return output;\n};\n\nModule.STDWEB_PRIVATE.id_to_ref_map = {};\nModule.STDWEB_PRIVATE.id_to_refcount_map = {};\nModule.STDWEB_PRIVATE.ref_to_id_map = new WeakMap();\n// Not all types can be stored in a WeakMap\nModule.STDWEB_PRIVATE.ref_to_id_map_fallback = new Map();\nModule.STDWEB_PRIVATE.last_refid = 1;\n\nModule.STDWEB_PRIVATE.id_to_raw_value_map = {};\nModule.STDWEB_PRIVATE.last_raw_value_id = 1;\n\nModule.STDWEB_PRIVATE.acquire_rust_reference = function( reference ) {\n    if( reference === undefined || reference === null ) {\n        return 0;\n    }\n\n    var id_to_refcount_map = Module.STDWEB_PRIVATE.id_to_refcount_map;\n    var id_to_ref_map = Module.STDWEB_PRIVATE.id_to_ref_map;\n    var ref_to_id_map = Module.STDWEB_PRIVATE.ref_to_id_map;\n    var ref_to_id_map_fallback = Module.STDWEB_PRIVATE.ref_to_id_map_fallback;\n\n    var refid = ref_to_id_map.get( reference );\n    if( refid === undefined ) {\n        refid = ref_to_id_map_fallback.get( reference );\n    }\n    if( refid === undefined ) {\n        refid = Module.STDWEB_PRIVATE.last_refid++;\n        try {\n            ref_to_id_map.set( reference, refid );\n        } catch (e) {\n            ref_to_id_map_fallback.set( reference, refid );\n        }\n    }\n\n    if( refid in id_to_ref_map ) {\n        id_to_refcount_map[ refid ]++;\n    } else {\n        id_to_ref_map[ refid ] = reference;\n        id_to_refcount_map[ refid ] = 1;\n    }\n\n    return refid;\n};\n\nModule.STDWEB_PRIVATE.acquire_js_reference = function( refid ) {\n    return Module.STDWEB_PRIVATE.id_to_ref_map[ refid ];\n};\n\nModule.STDWEB_PRIVATE.increment_refcount = function( refid ) {\n    Module.STDWEB_PRIVATE.id_to_refcount_map[ refid ]++;\n};\n\nModule.STDWEB_PRIVATE.decrement_refcount = function( refid ) {\n    var id_to_refcount_map = Module.STDWEB_PRIVATE.id_to_refcount_map;\n    if( 0 == --id_to_refcount_map[ refid ] ) {\n        var id_to_ref_map = Module.STDWEB_PRIVATE.id_to_ref_map;\n        var ref_to_id_map_fallback = Module.STDWEB_PRIVATE.ref_to_id_map_fallback;\n        var reference = id_to_ref_map[ refid ];\n        delete id_to_ref_map[ refid ];\n        delete id_to_refcount_map[ refid ];\n        ref_to_id_map_fallback.delete(reference);\n    }\n};\n\nModule.STDWEB_PRIVATE.register_raw_value = function( value ) {\n    var id = Module.STDWEB_PRIVATE.last_raw_value_id++;\n    Module.STDWEB_PRIVATE.id_to_raw_value_map[ id ] = value;\n    return id;\n};\n\nModule.STDWEB_PRIVATE.unregister_raw_value = function( id ) {\n    delete Module.STDWEB_PRIVATE.id_to_raw_value_map[ id ];\n};\n\nModule.STDWEB_PRIVATE.get_raw_value = function( id ) {\n    return Module.STDWEB_PRIVATE.id_to_raw_value_map[ id ];\n};\n\nModule.STDWEB_PRIVATE.alloc = function alloc( size ) {\n    return Module.web_malloc( size );\n};\n\nModule.STDWEB_PRIVATE.dyncall = function( signature, ptr, args ) {\n    return Module.web_table.get( ptr ).apply( null, args );\n};\n\n// This is based on code from Emscripten's preamble.js.\nModule.STDWEB_PRIVATE.utf8_len = function utf8_len( str ) {\n    let len = 0;\n    for( let i = 0; i < str.length; ++i ) {\n        // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.\n        // See http://unicode.org/faq/utf_bom.html#utf16-3\n        let u = str.charCodeAt( i ); // possibly a lead surrogate\n        if( u >= 0xD800 && u <= 0xDFFF ) {\n            u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt( ++i ) & 0x3FF);\n        }\n\n        if( u <= 0x7F ) {\n            ++len;\n        } else if( u <= 0x7FF ) {\n            len += 2;\n        } else if( u <= 0xFFFF ) {\n            len += 3;\n        } else if( u <= 0x1FFFFF ) {\n            len += 4;\n        } else if( u <= 0x3FFFFFF ) {\n            len += 5;\n        } else {\n            len += 6;\n        }\n    }\n    return len;\n};\n\nModule.STDWEB_PRIVATE.prepare_any_arg = function( value ) {\n    var arg = Module.STDWEB_PRIVATE.alloc( 16 );\n    Module.STDWEB_PRIVATE.from_js( arg, value );\n    return arg;\n};\n\nModule.STDWEB_PRIVATE.acquire_tmp = function( dummy ) {\n    var value = Module.STDWEB_PRIVATE.tmp;\n    Module.STDWEB_PRIVATE.tmp = null;\n    return value;\n};\n\n\n\n    let HEAP8 = null;\n    let HEAP16 = null;\n    let HEAP32 = null;\n    let HEAPU8 = null;\n    let HEAPU16 = null;\n    let HEAPU32 = null;\n    let HEAPF32 = null;\n    let HEAPF64 = null;\n\n    Object.defineProperty( Module, 'exports', { value: {} } );\n\n    const __imports = {\n        env: {\n            \"__extjs_dd742fd43ec5cb584d12e2b2cf147cf41128f3d1\": function($0, $1) {\n                $0 = Module.STDWEB_PRIVATE.to_js($0);$1 = Module.STDWEB_PRIVATE.to_js($1);var array = ($0); var pointer = ($1); HEAPU8.set (array , pointer);\n            },\n            \"__extjs_97495987af1720d8a9a923fa4683a7b683e3acd6\": function($0, $1) {\n                console.error( 'Panic error message:', Module.STDWEB_PRIVATE.to_js_string( $0, $1 ) );\n            },\n            \"__extjs_80d6d56760c65e49b7be8b6b01c1ea861b046bf0\": function($0) {\n                Module.STDWEB_PRIVATE.decrement_refcount( $0 );\n            },\n            \"__extjs_dc2fd915bd92f9e9c6a3bd15174f1414eee3dbaf\": function() {\n                console.error( 'Encountered a panic!' );\n            },\n            \"__extjs_72fc447820458c720c68d0d8e078ede631edd723\": function($0, $1, $2) {\n                console.error( 'Panic location:', Module.STDWEB_PRIVATE.to_js_string( $0, $1 ) + ':' + $2 );\n            },\n            \"__extjs_dcbfa3eb1cc89d9842b0ad8d9030a57a7cae7124\": function($0) {\n                return (Module.STDWEB_PRIVATE.acquire_js_reference( $0 ) instanceof Uint8Array) | 0;\n            },\n            \"__extjs_db0226ae1bbecd407e9880ee28ddc70fc3322d9c\": function($0) {\n                $0 = Module.STDWEB_PRIVATE.to_js($0);Module.STDWEB_PRIVATE.unregister_raw_value (($0));\n            },\n            \"__extjs_2f33107ff8cc02d70bb611c3ab61d4b0f0ca5848\": function($0, $1) {\n                return Module.STDWEB_PRIVATE.acquire_rust_reference( HEAPU8.slice( $0, $1 ) );\n            },\n            \"__extjs_bd7f6e324f00cca5b26b7c6dc239a28b71e047b4\": function($0, $1) {\n                $1 = Module.STDWEB_PRIVATE.to_js($1);Module.STDWEB_PRIVATE.from_js($0, (function(){return ($1). length ;})());\n            },\n            \"__extjs_ff5103e6cc179d13b4c7a785bdce2708fd559fc0\": function($0) {\n                Module.STDWEB_PRIVATE.tmp = Module.STDWEB_PRIVATE.to_js( $0 );\n            },\n            \"log2f\": function($0) {\n                return Math.log2( $0 );\n            },\n            \"log2\": function($0) {\n                return Math.log2( $0 );\n            },\n            \"__web_on_grow\": function() {\n                const buffer = Module.instance.exports.memory.buffer;\n                HEAP8 = new Int8Array( buffer );\n                HEAP16 = new Int16Array( buffer );\n                HEAP32 = new Int32Array( buffer );\n                HEAPU8 = new Uint8Array( buffer );\n                HEAPU16 = new Uint16Array( buffer );\n                HEAPU32 = new Uint32Array( buffer );\n                HEAPF32 = new Float32Array( buffer );\n                HEAPF64 = new Float64Array( buffer );\n            }\n        }\n    };\n\n    function __instantiate( instance ) {\n        Object.defineProperty( Module, 'instance', { value: instance } );\n        Object.defineProperty( Module, 'web_malloc', { value: Module.instance.exports.__web_malloc } );\n        Object.defineProperty( Module, 'web_free', { value: Module.instance.exports.__web_free } );\n        Object.defineProperty( Module, 'web_table', { value: Module.instance.exports.__web_table } );\n\n        Module.exports.compress = function compress(arr, buffer_size, quality, lg_window_size) {\n    return Module.STDWEB_PRIVATE.acquire_tmp(Module.instance.exports.compress(Module.STDWEB_PRIVATE.prepare_any_arg(arr), Module.STDWEB_PRIVATE.prepare_any_arg(buffer_size), Module.STDWEB_PRIVATE.prepare_any_arg(quality), Module.STDWEB_PRIVATE.prepare_any_arg(lg_window_size)));\n}\n;\n                Module.exports.decompress = function decompress(arr, buffer_size) {\n    return Module.STDWEB_PRIVATE.acquire_tmp(Module.instance.exports.decompress(Module.STDWEB_PRIVATE.prepare_any_arg(arr), Module.STDWEB_PRIVATE.prepare_any_arg(buffer_size)));\n}\n;\n        __imports.env.__web_on_grow();\n        \n    }\n\n    if( __load_asynchronously ) {\n        return WebAssembly.instantiate( __wasm_module, __imports )\n            .then( instance => {\n                __instantiate( instance );\n                console.log( \"Finished loading Rust wasm module 'rus'\" );\n                return Module.exports;\n            })\n            .catch( error => {\n                console.log( \"Error loading Rust wasm module 'rus':\", error );\n                throw error;\n            });\n    } else {\n        const instance = new WebAssembly.Instance( __wasm_module, __imports );\n        __instantiate( instance );\n        return Module.exports;\n    }\n}\n\n                return fetch( bundle )\n                    .then( response => response.arrayBuffer() )\n                    .then( bytes => WebAssembly.compile( bytes ) )\n                    .then( mod => __initialize( mod, true ) );\n            };\n        "]}